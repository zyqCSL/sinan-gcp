/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "social_network_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace social_network {

int _kErrorCodeValues[] = {
  ErrorCode::SE_CONNPOOL_TIMEOUT,
  ErrorCode::SE_THRIFT_CONN_ERROR,
  ErrorCode::SE_UNAUTHORIZED,
  ErrorCode::SE_MEMCACHED_ERROR,
  ErrorCode::SE_MONGODB_ERROR,
  ErrorCode::SE_REDIS_ERROR,
  ErrorCode::SE_THRIFT_HANDLER_ERROR,
  ErrorCode::SE_RABBITMQ_CONN_ERROR
};
const char* _kErrorCodeNames[] = {
  "SE_CONNPOOL_TIMEOUT",
  "SE_THRIFT_CONN_ERROR",
  "SE_UNAUTHORIZED",
  "SE_MEMCACHED_ERROR",
  "SE_MONGODB_ERROR",
  "SE_REDIS_ERROR",
  "SE_THRIFT_HANDLER_ERROR",
  "SE_RABBITMQ_CONN_ERROR"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _ErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPostTypeValues[] = {
  PostType::POST,
  PostType::REPOST,
  PostType::REPLY,
  PostType::DM
};
const char* _kPostTypeNames[] = {
  "POST",
  "REPOST",
  "REPLY",
  "DM"
};
const std::map<int, const char*> _PostType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPostTypeValues, _kPostTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PostType::type& val) {
  std::map<int, const char*>::const_iterator it = _PostType_VALUES_TO_NAMES.find(val);
  if (it != _PostType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


User::~User() throw() {
}


void User::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void User::__set_first_name(const std::string& val) {
  this->first_name = val;
}

void User::__set_last_name(const std::string& val) {
  this->last_name = val;
}

void User::__set_username(const std::string& val) {
  this->username = val;
}

void User::__set_password_hashed(const std::string& val) {
  this->password_hashed = val;
}

void User::__set_salt(const std::string& val) {
  this->salt = val;
}
std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->first_name);
          this->__isset.first_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last_name);
          this->__isset.last_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password_hashed);
          this->__isset.password_hashed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->salt);
          this->__isset.salt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->first_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->last_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password_hashed", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->password_hashed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("salt", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->salt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.first_name, b.first_name);
  swap(a.last_name, b.last_name);
  swap(a.username, b.username);
  swap(a.password_hashed, b.password_hashed);
  swap(a.salt, b.salt);
  swap(a.__isset, b.__isset);
}

User::User(const User& other0) {
  user_id = other0.user_id;
  first_name = other0.first_name;
  last_name = other0.last_name;
  username = other0.username;
  password_hashed = other0.password_hashed;
  salt = other0.salt;
  __isset = other0.__isset;
}
User& User::operator=(const User& other1) {
  user_id = other1.user_id;
  first_name = other1.first_name;
  last_name = other1.last_name;
  username = other1.username;
  password_hashed = other1.password_hashed;
  salt = other1.salt;
  __isset = other1.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "first_name=" << to_string(first_name);
  out << ", " << "last_name=" << to_string(last_name);
  out << ", " << "username=" << to_string(username);
  out << ", " << "password_hashed=" << to_string(password_hashed);
  out << ", " << "salt=" << to_string(salt);
  out << ")";
}


ServiceException::~ServiceException() throw() {
}


void ServiceException::__set_errorCode(const ErrorCode::type val) {
  this->errorCode = val;
}

void ServiceException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const ServiceException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ServiceException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->errorCode = (ErrorCode::type)ecast2;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceException &a, ServiceException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ServiceException::ServiceException(const ServiceException& other3) : TException() {
  errorCode = other3.errorCode;
  message = other3.message;
  __isset = other3.__isset;
}
ServiceException& ServiceException::operator=(const ServiceException& other4) {
  errorCode = other4.errorCode;
  message = other4.message;
  __isset = other4.__isset;
  return *this;
}
void ServiceException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceException(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "message=" << to_string(message);
  out << ")";
}

const char* ServiceException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ServiceException";
  }
}


Media::~Media() throw() {
}


void Media::__set_media(const std::string& val) {
  this->media = val;
}

void Media::__set_media_type(const std::string& val) {
  this->media_type = val;
}
std::ostream& operator<<(std::ostream& out, const Media& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Media::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->media);
          this->__isset.media = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->media_type);
          this->__isset.media_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Media::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Media");

  xfer += oprot->writeFieldBegin("media", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->media);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media_type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->media_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Media &a, Media &b) {
  using ::std::swap;
  swap(a.media, b.media);
  swap(a.media_type, b.media_type);
  swap(a.__isset, b.__isset);
}

Media::Media(const Media& other5) {
  media = other5.media;
  media_type = other5.media_type;
  __isset = other5.__isset;
}
Media& Media::operator=(const Media& other6) {
  media = other6.media;
  media_type = other6.media_type;
  __isset = other6.__isset;
  return *this;
}
void Media::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Media(";
  out << "media=" << to_string(media);
  out << ", " << "media_type=" << to_string(media_type);
  out << ")";
}


Url::~Url() throw() {
}


void Url::__set_shortened_url(const std::string& val) {
  this->shortened_url = val;
}

void Url::__set_expanded_url(const std::string& val) {
  this->expanded_url = val;
}
std::ostream& operator<<(std::ostream& out, const Url& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Url::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shortened_url);
          this->__isset.shortened_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expanded_url);
          this->__isset.expanded_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Url::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Url");

  xfer += oprot->writeFieldBegin("shortened_url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->shortened_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expanded_url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->expanded_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Url &a, Url &b) {
  using ::std::swap;
  swap(a.shortened_url, b.shortened_url);
  swap(a.expanded_url, b.expanded_url);
  swap(a.__isset, b.__isset);
}

Url::Url(const Url& other7) {
  shortened_url = other7.shortened_url;
  expanded_url = other7.expanded_url;
  __isset = other7.__isset;
}
Url& Url::operator=(const Url& other8) {
  shortened_url = other8.shortened_url;
  expanded_url = other8.expanded_url;
  __isset = other8.__isset;
  return *this;
}
void Url::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Url(";
  out << "shortened_url=" << to_string(shortened_url);
  out << ", " << "expanded_url=" << to_string(expanded_url);
  out << ")";
}


UserMention::~UserMention() throw() {
}


void UserMention::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void UserMention::__set_username(const std::string& val) {
  this->username = val;
}
std::ostream& operator<<(std::ostream& out, const UserMention& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserMention::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserMention::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserMention");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserMention &a, UserMention &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.username, b.username);
  swap(a.__isset, b.__isset);
}

UserMention::UserMention(const UserMention& other9) {
  user_id = other9.user_id;
  username = other9.username;
  __isset = other9.__isset;
}
UserMention& UserMention::operator=(const UserMention& other10) {
  user_id = other10.user_id;
  username = other10.username;
  __isset = other10.__isset;
  return *this;
}
void UserMention::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserMention(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "username=" << to_string(username);
  out << ")";
}


Creator::~Creator() throw() {
}


void Creator::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void Creator::__set_username(const std::string& val) {
  this->username = val;
}
std::ostream& operator<<(std::ostream& out, const Creator& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Creator::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Creator::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Creator");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Creator &a, Creator &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.username, b.username);
  swap(a.__isset, b.__isset);
}

Creator::Creator(const Creator& other11) {
  user_id = other11.user_id;
  username = other11.username;
  __isset = other11.__isset;
}
Creator& Creator::operator=(const Creator& other12) {
  user_id = other12.user_id;
  username = other12.username;
  __isset = other12.__isset;
  return *this;
}
void Creator::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Creator(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "username=" << to_string(username);
  out << ")";
}


Post::~Post() throw() {
}


void Post::__set_post_id(const int64_t val) {
  this->post_id = val;
}

void Post::__set_creator(const Creator& val) {
  this->creator = val;
}

void Post::__set_req_id(const int64_t val) {
  this->req_id = val;
}

void Post::__set_text(const std::string& val) {
  this->text = val;
}

void Post::__set_user_mentions(const std::vector<UserMention> & val) {
  this->user_mentions = val;
}

void Post::__set_media(const std::vector<Media> & val) {
  this->media = val;
}

void Post::__set_urls(const std::vector<Url> & val) {
  this->urls = val;
}

void Post::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void Post::__set_post_type(const PostType::type val) {
  this->post_type = val;
}
std::ostream& operator<<(std::ostream& out, const Post& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Post::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->post_id);
          this->__isset.post_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->creator.read(iprot);
          this->__isset.creator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->req_id);
          this->__isset.req_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->user_mentions.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->user_mentions.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->user_mentions[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.user_mentions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->media.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->media.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->media[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.media = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->urls.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->urls.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += this->urls[_i27].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.urls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          this->post_type = (PostType::type)ecast28;
          this->__isset.post_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Post::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Post");

  xfer += oprot->writeFieldBegin("post_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->post_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creator", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->creator.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("req_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->req_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_mentions", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->user_mentions.size()));
    std::vector<UserMention> ::const_iterator _iter29;
    for (_iter29 = this->user_mentions.begin(); _iter29 != this->user_mentions.end(); ++_iter29)
    {
      xfer += (*_iter29).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->media.size()));
    std::vector<Media> ::const_iterator _iter30;
    for (_iter30 = this->media.begin(); _iter30 != this->media.end(); ++_iter30)
    {
      xfer += (*_iter30).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("urls", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->urls.size()));
    std::vector<Url> ::const_iterator _iter31;
    for (_iter31 = this->urls.begin(); _iter31 != this->urls.end(); ++_iter31)
    {
      xfer += (*_iter31).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("post_type", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->post_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Post &a, Post &b) {
  using ::std::swap;
  swap(a.post_id, b.post_id);
  swap(a.creator, b.creator);
  swap(a.req_id, b.req_id);
  swap(a.text, b.text);
  swap(a.user_mentions, b.user_mentions);
  swap(a.media, b.media);
  swap(a.urls, b.urls);
  swap(a.timestamp, b.timestamp);
  swap(a.post_type, b.post_type);
  swap(a.__isset, b.__isset);
}

Post::Post(const Post& other32) {
  post_id = other32.post_id;
  creator = other32.creator;
  req_id = other32.req_id;
  text = other32.text;
  user_mentions = other32.user_mentions;
  media = other32.media;
  urls = other32.urls;
  timestamp = other32.timestamp;
  post_type = other32.post_type;
  __isset = other32.__isset;
}
Post& Post::operator=(const Post& other33) {
  post_id = other33.post_id;
  creator = other33.creator;
  req_id = other33.req_id;
  text = other33.text;
  user_mentions = other33.user_mentions;
  media = other33.media;
  urls = other33.urls;
  timestamp = other33.timestamp;
  post_type = other33.post_type;
  __isset = other33.__isset;
  return *this;
}
void Post::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Post(";
  out << "post_id=" << to_string(post_id);
  out << ", " << "creator=" << to_string(creator);
  out << ", " << "req_id=" << to_string(req_id);
  out << ", " << "text=" << to_string(text);
  out << ", " << "user_mentions=" << to_string(user_mentions);
  out << ", " << "media=" << to_string(media);
  out << ", " << "urls=" << to_string(urls);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "post_type=" << to_string(post_type);
  out << ")";
}

} // namespace
