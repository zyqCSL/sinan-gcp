/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserTimelineService_H
#define UserTimelineService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserTimelineServiceIf {
 public:
  virtual ~UserTimelineServiceIf() {}
  virtual void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier) = 0;
};

class UserTimelineServiceIfFactory {
 public:
  typedef UserTimelineServiceIf Handler;

  virtual ~UserTimelineServiceIfFactory() {}

  virtual UserTimelineServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserTimelineServiceIf* /* handler */) = 0;
};

class UserTimelineServiceIfSingletonFactory : virtual public UserTimelineServiceIfFactory {
 public:
  UserTimelineServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<UserTimelineServiceIf>& iface) : iface_(iface) {}
  virtual ~UserTimelineServiceIfSingletonFactory() {}

  virtual UserTimelineServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserTimelineServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserTimelineServiceIf> iface_;
};

class UserTimelineServiceNull : virtual public UserTimelineServiceIf {
 public:
  virtual ~UserTimelineServiceNull() {}
  void ReadUserTimeline(std::vector<Post> & /* _return */, const int64_t /* req_id */, const int64_t /* user_id */, const int32_t /* start */, const int32_t /* stop */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _UserTimelineService_ReadUserTimeline_args__isset {
  _UserTimelineService_ReadUserTimeline_args__isset() : req_id(false), user_id(false), start(false), stop(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool start :1;
  bool stop :1;
  bool carrier :1;
} _UserTimelineService_ReadUserTimeline_args__isset;

class UserTimelineService_ReadUserTimeline_args {
 public:

  UserTimelineService_ReadUserTimeline_args(const UserTimelineService_ReadUserTimeline_args&);
  UserTimelineService_ReadUserTimeline_args& operator=(const UserTimelineService_ReadUserTimeline_args&);
  UserTimelineService_ReadUserTimeline_args() : req_id(0), user_id(0), start(0), stop(0) {
  }

  virtual ~UserTimelineService_ReadUserTimeline_args() throw();
  int64_t req_id;
  int64_t user_id;
  int32_t start;
  int32_t stop;
  std::map<std::string, std::string>  carrier;

  _UserTimelineService_ReadUserTimeline_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_start(const int32_t val);

  void __set_stop(const int32_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const UserTimelineService_ReadUserTimeline_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const UserTimelineService_ReadUserTimeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTimelineService_ReadUserTimeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserTimelineService_ReadUserTimeline_pargs {
 public:


  virtual ~UserTimelineService_ReadUserTimeline_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const int32_t* start;
  const int32_t* stop;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserTimelineService_ReadUserTimeline_result__isset {
  _UserTimelineService_ReadUserTimeline_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserTimelineService_ReadUserTimeline_result__isset;

class UserTimelineService_ReadUserTimeline_result {
 public:

  UserTimelineService_ReadUserTimeline_result(const UserTimelineService_ReadUserTimeline_result&);
  UserTimelineService_ReadUserTimeline_result& operator=(const UserTimelineService_ReadUserTimeline_result&);
  UserTimelineService_ReadUserTimeline_result() {
  }

  virtual ~UserTimelineService_ReadUserTimeline_result() throw();
  std::vector<Post>  success;
  ServiceException se;

  _UserTimelineService_ReadUserTimeline_result__isset __isset;

  void __set_success(const std::vector<Post> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserTimelineService_ReadUserTimeline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserTimelineService_ReadUserTimeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTimelineService_ReadUserTimeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserTimelineService_ReadUserTimeline_presult__isset {
  _UserTimelineService_ReadUserTimeline_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserTimelineService_ReadUserTimeline_presult__isset;

class UserTimelineService_ReadUserTimeline_presult {
 public:


  virtual ~UserTimelineService_ReadUserTimeline_presult() throw();
  std::vector<Post> * success;
  ServiceException se;

  _UserTimelineService_ReadUserTimeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserTimelineServiceClient : virtual public UserTimelineServiceIf {
 public:
  UserTimelineServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserTimelineServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  void send_ReadUserTimeline(const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  void recv_ReadUserTimeline(std::vector<Post> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserTimelineServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserTimelineServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserTimelineServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReadUserTimeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserTimelineServiceProcessor(::apache::thrift::stdcxx::shared_ptr<UserTimelineServiceIf> iface) :
    iface_(iface) {
    processMap_["ReadUserTimeline"] = &UserTimelineServiceProcessor::process_ReadUserTimeline;
  }

  virtual ~UserTimelineServiceProcessor() {}
};

class UserTimelineServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserTimelineServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< UserTimelineServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< UserTimelineServiceIfFactory > handlerFactory_;
};

class UserTimelineServiceMultiface : virtual public UserTimelineServiceIf {
 public:
  UserTimelineServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<UserTimelineServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserTimelineServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<UserTimelineServiceIf> > ifaces_;
  UserTimelineServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<UserTimelineServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadUserTimeline(_return, req_id, user_id, start, stop, carrier);
    }
    ifaces_[i]->ReadUserTimeline(_return, req_id, user_id, start, stop, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserTimelineServiceConcurrentClient : virtual public UserTimelineServiceIf {
 public:
  UserTimelineServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserTimelineServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  int32_t send_ReadUserTimeline(const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  void recv_ReadUserTimeline(std::vector<Post> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
