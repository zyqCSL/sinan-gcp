/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MediaService_H
#define MediaService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MediaServiceIf {
 public:
  virtual ~MediaServiceIf() {}
  virtual void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<std::string> & medium, const std::map<std::string, std::string> & carrier) = 0;
};

class MediaServiceIfFactory {
 public:
  typedef MediaServiceIf Handler;

  virtual ~MediaServiceIfFactory() {}

  virtual MediaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MediaServiceIf* /* handler */) = 0;
};

class MediaServiceIfSingletonFactory : virtual public MediaServiceIfFactory {
 public:
  MediaServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<MediaServiceIf>& iface) : iface_(iface) {}
  virtual ~MediaServiceIfSingletonFactory() {}

  virtual MediaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MediaServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<MediaServiceIf> iface_;
};

class MediaServiceNull : virtual public MediaServiceIf {
 public:
  virtual ~MediaServiceNull() {}
  void UploadMedia(const int64_t /* req_id */, const std::vector<std::string> & /* media_types */, const std::vector<std::string> & /* medium */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _MediaService_UploadMedia_args__isset {
  _MediaService_UploadMedia_args__isset() : req_id(false), media_types(false), medium(false), carrier(false) {}
  bool req_id :1;
  bool media_types :1;
  bool medium :1;
  bool carrier :1;
} _MediaService_UploadMedia_args__isset;

class MediaService_UploadMedia_args {
 public:

  MediaService_UploadMedia_args(const MediaService_UploadMedia_args&);
  MediaService_UploadMedia_args& operator=(const MediaService_UploadMedia_args&);
  MediaService_UploadMedia_args() : req_id(0) {
  }

  virtual ~MediaService_UploadMedia_args() throw();
  int64_t req_id;
  std::vector<std::string>  media_types;
  std::vector<std::string>  medium;
  std::map<std::string, std::string>  carrier;

  _MediaService_UploadMedia_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_media_types(const std::vector<std::string> & val);

  void __set_medium(const std::vector<std::string> & val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const MediaService_UploadMedia_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(media_types == rhs.media_types))
      return false;
    if (!(medium == rhs.medium))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const MediaService_UploadMedia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaService_UploadMedia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MediaService_UploadMedia_pargs {
 public:


  virtual ~MediaService_UploadMedia_pargs() throw();
  const int64_t* req_id;
  const std::vector<std::string> * media_types;
  const std::vector<std::string> * medium;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MediaService_UploadMedia_result__isset {
  _MediaService_UploadMedia_result__isset() : se(false) {}
  bool se :1;
} _MediaService_UploadMedia_result__isset;

class MediaService_UploadMedia_result {
 public:

  MediaService_UploadMedia_result(const MediaService_UploadMedia_result&);
  MediaService_UploadMedia_result& operator=(const MediaService_UploadMedia_result&);
  MediaService_UploadMedia_result() {
  }

  virtual ~MediaService_UploadMedia_result() throw();
  ServiceException se;

  _MediaService_UploadMedia_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const MediaService_UploadMedia_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const MediaService_UploadMedia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaService_UploadMedia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MediaService_UploadMedia_presult__isset {
  _MediaService_UploadMedia_presult__isset() : se(false) {}
  bool se :1;
} _MediaService_UploadMedia_presult__isset;

class MediaService_UploadMedia_presult {
 public:


  virtual ~MediaService_UploadMedia_presult() throw();
  ServiceException se;

  _MediaService_UploadMedia_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MediaServiceClient : virtual public MediaServiceIf {
 public:
  MediaServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MediaServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<std::string> & medium, const std::map<std::string, std::string> & carrier);
  void send_UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<std::string> & medium, const std::map<std::string, std::string> & carrier);
  void recv_UploadMedia();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MediaServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<MediaServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MediaServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadMedia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MediaServiceProcessor(::apache::thrift::stdcxx::shared_ptr<MediaServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadMedia"] = &MediaServiceProcessor::process_UploadMedia;
  }

  virtual ~MediaServiceProcessor() {}
};

class MediaServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MediaServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< MediaServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< MediaServiceIfFactory > handlerFactory_;
};

class MediaServiceMultiface : virtual public MediaServiceIf {
 public:
  MediaServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<MediaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MediaServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<MediaServiceIf> > ifaces_;
  MediaServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<MediaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<std::string> & medium, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadMedia(req_id, media_types, medium, carrier);
    }
    ifaces_[i]->UploadMedia(req_id, media_types, medium, carrier);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MediaServiceConcurrentClient : virtual public MediaServiceIf {
 public:
  MediaServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MediaServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<std::string> & medium, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<std::string> & medium, const std::map<std::string, std::string> & carrier);
  void recv_UploadMedia(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
