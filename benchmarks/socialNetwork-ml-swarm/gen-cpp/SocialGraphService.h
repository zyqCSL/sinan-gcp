/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SocialGraphService_H
#define SocialGraphService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SocialGraphServiceIf {
 public:
  virtual ~SocialGraphServiceIf() {}
  virtual void GetFollowers(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) = 0;
  virtual void GetFollowees(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) = 0;
  virtual void Follow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier) = 0;
  virtual void Unfollow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier) = 0;
  virtual void FollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier) = 0;
  virtual void UnfollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier) = 0;
  virtual void InsertUser(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) = 0;
};

class SocialGraphServiceIfFactory {
 public:
  typedef SocialGraphServiceIf Handler;

  virtual ~SocialGraphServiceIfFactory() {}

  virtual SocialGraphServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SocialGraphServiceIf* /* handler */) = 0;
};

class SocialGraphServiceIfSingletonFactory : virtual public SocialGraphServiceIfFactory {
 public:
  SocialGraphServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SocialGraphServiceIf>& iface) : iface_(iface) {}
  virtual ~SocialGraphServiceIfSingletonFactory() {}

  virtual SocialGraphServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SocialGraphServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SocialGraphServiceIf> iface_;
};

class SocialGraphServiceNull : virtual public SocialGraphServiceIf {
 public:
  virtual ~SocialGraphServiceNull() {}
  void GetFollowers(std::vector<int64_t> & /* _return */, const int64_t /* req_id */, const int64_t /* user_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void GetFollowees(std::vector<int64_t> & /* _return */, const int64_t /* req_id */, const int64_t /* user_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void Follow(const int64_t /* req_id */, const int64_t /* user_id */, const int64_t /* followee_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void Unfollow(const int64_t /* req_id */, const int64_t /* user_id */, const int64_t /* followee_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void FollowWithUsername(const int64_t /* req_id */, const std::string& /* user_usernmae */, const std::string& /* followee_username */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void UnfollowWithUsername(const int64_t /* req_id */, const std::string& /* user_usernmae */, const std::string& /* followee_username */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void InsertUser(const int64_t /* req_id */, const int64_t /* user_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _SocialGraphService_GetFollowers_args__isset {
  _SocialGraphService_GetFollowers_args__isset() : req_id(false), user_id(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool carrier :1;
} _SocialGraphService_GetFollowers_args__isset;

class SocialGraphService_GetFollowers_args {
 public:

  SocialGraphService_GetFollowers_args(const SocialGraphService_GetFollowers_args&);
  SocialGraphService_GetFollowers_args& operator=(const SocialGraphService_GetFollowers_args&);
  SocialGraphService_GetFollowers_args() : req_id(0), user_id(0) {
  }

  virtual ~SocialGraphService_GetFollowers_args() throw();
  int64_t req_id;
  int64_t user_id;
  std::map<std::string, std::string>  carrier;

  _SocialGraphService_GetFollowers_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const SocialGraphService_GetFollowers_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_GetFollowers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_GetFollowers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SocialGraphService_GetFollowers_pargs {
 public:


  virtual ~SocialGraphService_GetFollowers_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_GetFollowers_result__isset {
  _SocialGraphService_GetFollowers_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _SocialGraphService_GetFollowers_result__isset;

class SocialGraphService_GetFollowers_result {
 public:

  SocialGraphService_GetFollowers_result(const SocialGraphService_GetFollowers_result&);
  SocialGraphService_GetFollowers_result& operator=(const SocialGraphService_GetFollowers_result&);
  SocialGraphService_GetFollowers_result() {
  }

  virtual ~SocialGraphService_GetFollowers_result() throw();
  std::vector<int64_t>  success;
  ServiceException se;

  _SocialGraphService_GetFollowers_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const SocialGraphService_GetFollowers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_GetFollowers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_GetFollowers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_GetFollowers_presult__isset {
  _SocialGraphService_GetFollowers_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _SocialGraphService_GetFollowers_presult__isset;

class SocialGraphService_GetFollowers_presult {
 public:


  virtual ~SocialGraphService_GetFollowers_presult() throw();
  std::vector<int64_t> * success;
  ServiceException se;

  _SocialGraphService_GetFollowers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SocialGraphService_GetFollowees_args__isset {
  _SocialGraphService_GetFollowees_args__isset() : req_id(false), user_id(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool carrier :1;
} _SocialGraphService_GetFollowees_args__isset;

class SocialGraphService_GetFollowees_args {
 public:

  SocialGraphService_GetFollowees_args(const SocialGraphService_GetFollowees_args&);
  SocialGraphService_GetFollowees_args& operator=(const SocialGraphService_GetFollowees_args&);
  SocialGraphService_GetFollowees_args() : req_id(0), user_id(0) {
  }

  virtual ~SocialGraphService_GetFollowees_args() throw();
  int64_t req_id;
  int64_t user_id;
  std::map<std::string, std::string>  carrier;

  _SocialGraphService_GetFollowees_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const SocialGraphService_GetFollowees_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_GetFollowees_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_GetFollowees_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SocialGraphService_GetFollowees_pargs {
 public:


  virtual ~SocialGraphService_GetFollowees_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_GetFollowees_result__isset {
  _SocialGraphService_GetFollowees_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _SocialGraphService_GetFollowees_result__isset;

class SocialGraphService_GetFollowees_result {
 public:

  SocialGraphService_GetFollowees_result(const SocialGraphService_GetFollowees_result&);
  SocialGraphService_GetFollowees_result& operator=(const SocialGraphService_GetFollowees_result&);
  SocialGraphService_GetFollowees_result() {
  }

  virtual ~SocialGraphService_GetFollowees_result() throw();
  std::vector<int64_t>  success;
  ServiceException se;

  _SocialGraphService_GetFollowees_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const SocialGraphService_GetFollowees_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_GetFollowees_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_GetFollowees_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_GetFollowees_presult__isset {
  _SocialGraphService_GetFollowees_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _SocialGraphService_GetFollowees_presult__isset;

class SocialGraphService_GetFollowees_presult {
 public:


  virtual ~SocialGraphService_GetFollowees_presult() throw();
  std::vector<int64_t> * success;
  ServiceException se;

  _SocialGraphService_GetFollowees_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SocialGraphService_Follow_args__isset {
  _SocialGraphService_Follow_args__isset() : req_id(false), user_id(false), followee_id(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool followee_id :1;
  bool carrier :1;
} _SocialGraphService_Follow_args__isset;

class SocialGraphService_Follow_args {
 public:

  SocialGraphService_Follow_args(const SocialGraphService_Follow_args&);
  SocialGraphService_Follow_args& operator=(const SocialGraphService_Follow_args&);
  SocialGraphService_Follow_args() : req_id(0), user_id(0), followee_id(0) {
  }

  virtual ~SocialGraphService_Follow_args() throw();
  int64_t req_id;
  int64_t user_id;
  int64_t followee_id;
  std::map<std::string, std::string>  carrier;

  _SocialGraphService_Follow_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_followee_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const SocialGraphService_Follow_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(followee_id == rhs.followee_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_Follow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_Follow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SocialGraphService_Follow_pargs {
 public:


  virtual ~SocialGraphService_Follow_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const int64_t* followee_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_Follow_result__isset {
  _SocialGraphService_Follow_result__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_Follow_result__isset;

class SocialGraphService_Follow_result {
 public:

  SocialGraphService_Follow_result(const SocialGraphService_Follow_result&);
  SocialGraphService_Follow_result& operator=(const SocialGraphService_Follow_result&);
  SocialGraphService_Follow_result() {
  }

  virtual ~SocialGraphService_Follow_result() throw();
  ServiceException se;

  _SocialGraphService_Follow_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const SocialGraphService_Follow_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_Follow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_Follow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_Follow_presult__isset {
  _SocialGraphService_Follow_presult__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_Follow_presult__isset;

class SocialGraphService_Follow_presult {
 public:


  virtual ~SocialGraphService_Follow_presult() throw();
  ServiceException se;

  _SocialGraphService_Follow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SocialGraphService_Unfollow_args__isset {
  _SocialGraphService_Unfollow_args__isset() : req_id(false), user_id(false), followee_id(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool followee_id :1;
  bool carrier :1;
} _SocialGraphService_Unfollow_args__isset;

class SocialGraphService_Unfollow_args {
 public:

  SocialGraphService_Unfollow_args(const SocialGraphService_Unfollow_args&);
  SocialGraphService_Unfollow_args& operator=(const SocialGraphService_Unfollow_args&);
  SocialGraphService_Unfollow_args() : req_id(0), user_id(0), followee_id(0) {
  }

  virtual ~SocialGraphService_Unfollow_args() throw();
  int64_t req_id;
  int64_t user_id;
  int64_t followee_id;
  std::map<std::string, std::string>  carrier;

  _SocialGraphService_Unfollow_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_followee_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const SocialGraphService_Unfollow_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(followee_id == rhs.followee_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_Unfollow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_Unfollow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SocialGraphService_Unfollow_pargs {
 public:


  virtual ~SocialGraphService_Unfollow_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const int64_t* followee_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_Unfollow_result__isset {
  _SocialGraphService_Unfollow_result__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_Unfollow_result__isset;

class SocialGraphService_Unfollow_result {
 public:

  SocialGraphService_Unfollow_result(const SocialGraphService_Unfollow_result&);
  SocialGraphService_Unfollow_result& operator=(const SocialGraphService_Unfollow_result&);
  SocialGraphService_Unfollow_result() {
  }

  virtual ~SocialGraphService_Unfollow_result() throw();
  ServiceException se;

  _SocialGraphService_Unfollow_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const SocialGraphService_Unfollow_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_Unfollow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_Unfollow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_Unfollow_presult__isset {
  _SocialGraphService_Unfollow_presult__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_Unfollow_presult__isset;

class SocialGraphService_Unfollow_presult {
 public:


  virtual ~SocialGraphService_Unfollow_presult() throw();
  ServiceException se;

  _SocialGraphService_Unfollow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SocialGraphService_FollowWithUsername_args__isset {
  _SocialGraphService_FollowWithUsername_args__isset() : req_id(false), user_usernmae(false), followee_username(false), carrier(false) {}
  bool req_id :1;
  bool user_usernmae :1;
  bool followee_username :1;
  bool carrier :1;
} _SocialGraphService_FollowWithUsername_args__isset;

class SocialGraphService_FollowWithUsername_args {
 public:

  SocialGraphService_FollowWithUsername_args(const SocialGraphService_FollowWithUsername_args&);
  SocialGraphService_FollowWithUsername_args& operator=(const SocialGraphService_FollowWithUsername_args&);
  SocialGraphService_FollowWithUsername_args() : req_id(0), user_usernmae(), followee_username() {
  }

  virtual ~SocialGraphService_FollowWithUsername_args() throw();
  int64_t req_id;
  std::string user_usernmae;
  std::string followee_username;
  std::map<std::string, std::string>  carrier;

  _SocialGraphService_FollowWithUsername_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_usernmae(const std::string& val);

  void __set_followee_username(const std::string& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const SocialGraphService_FollowWithUsername_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_usernmae == rhs.user_usernmae))
      return false;
    if (!(followee_username == rhs.followee_username))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_FollowWithUsername_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_FollowWithUsername_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SocialGraphService_FollowWithUsername_pargs {
 public:


  virtual ~SocialGraphService_FollowWithUsername_pargs() throw();
  const int64_t* req_id;
  const std::string* user_usernmae;
  const std::string* followee_username;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_FollowWithUsername_result__isset {
  _SocialGraphService_FollowWithUsername_result__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_FollowWithUsername_result__isset;

class SocialGraphService_FollowWithUsername_result {
 public:

  SocialGraphService_FollowWithUsername_result(const SocialGraphService_FollowWithUsername_result&);
  SocialGraphService_FollowWithUsername_result& operator=(const SocialGraphService_FollowWithUsername_result&);
  SocialGraphService_FollowWithUsername_result() {
  }

  virtual ~SocialGraphService_FollowWithUsername_result() throw();
  ServiceException se;

  _SocialGraphService_FollowWithUsername_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const SocialGraphService_FollowWithUsername_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_FollowWithUsername_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_FollowWithUsername_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_FollowWithUsername_presult__isset {
  _SocialGraphService_FollowWithUsername_presult__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_FollowWithUsername_presult__isset;

class SocialGraphService_FollowWithUsername_presult {
 public:


  virtual ~SocialGraphService_FollowWithUsername_presult() throw();
  ServiceException se;

  _SocialGraphService_FollowWithUsername_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SocialGraphService_UnfollowWithUsername_args__isset {
  _SocialGraphService_UnfollowWithUsername_args__isset() : req_id(false), user_usernmae(false), followee_username(false), carrier(false) {}
  bool req_id :1;
  bool user_usernmae :1;
  bool followee_username :1;
  bool carrier :1;
} _SocialGraphService_UnfollowWithUsername_args__isset;

class SocialGraphService_UnfollowWithUsername_args {
 public:

  SocialGraphService_UnfollowWithUsername_args(const SocialGraphService_UnfollowWithUsername_args&);
  SocialGraphService_UnfollowWithUsername_args& operator=(const SocialGraphService_UnfollowWithUsername_args&);
  SocialGraphService_UnfollowWithUsername_args() : req_id(0), user_usernmae(), followee_username() {
  }

  virtual ~SocialGraphService_UnfollowWithUsername_args() throw();
  int64_t req_id;
  std::string user_usernmae;
  std::string followee_username;
  std::map<std::string, std::string>  carrier;

  _SocialGraphService_UnfollowWithUsername_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_usernmae(const std::string& val);

  void __set_followee_username(const std::string& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const SocialGraphService_UnfollowWithUsername_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_usernmae == rhs.user_usernmae))
      return false;
    if (!(followee_username == rhs.followee_username))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_UnfollowWithUsername_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_UnfollowWithUsername_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SocialGraphService_UnfollowWithUsername_pargs {
 public:


  virtual ~SocialGraphService_UnfollowWithUsername_pargs() throw();
  const int64_t* req_id;
  const std::string* user_usernmae;
  const std::string* followee_username;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_UnfollowWithUsername_result__isset {
  _SocialGraphService_UnfollowWithUsername_result__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_UnfollowWithUsername_result__isset;

class SocialGraphService_UnfollowWithUsername_result {
 public:

  SocialGraphService_UnfollowWithUsername_result(const SocialGraphService_UnfollowWithUsername_result&);
  SocialGraphService_UnfollowWithUsername_result& operator=(const SocialGraphService_UnfollowWithUsername_result&);
  SocialGraphService_UnfollowWithUsername_result() {
  }

  virtual ~SocialGraphService_UnfollowWithUsername_result() throw();
  ServiceException se;

  _SocialGraphService_UnfollowWithUsername_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const SocialGraphService_UnfollowWithUsername_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_UnfollowWithUsername_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_UnfollowWithUsername_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_UnfollowWithUsername_presult__isset {
  _SocialGraphService_UnfollowWithUsername_presult__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_UnfollowWithUsername_presult__isset;

class SocialGraphService_UnfollowWithUsername_presult {
 public:


  virtual ~SocialGraphService_UnfollowWithUsername_presult() throw();
  ServiceException se;

  _SocialGraphService_UnfollowWithUsername_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SocialGraphService_InsertUser_args__isset {
  _SocialGraphService_InsertUser_args__isset() : req_id(false), user_id(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool carrier :1;
} _SocialGraphService_InsertUser_args__isset;

class SocialGraphService_InsertUser_args {
 public:

  SocialGraphService_InsertUser_args(const SocialGraphService_InsertUser_args&);
  SocialGraphService_InsertUser_args& operator=(const SocialGraphService_InsertUser_args&);
  SocialGraphService_InsertUser_args() : req_id(0), user_id(0) {
  }

  virtual ~SocialGraphService_InsertUser_args() throw();
  int64_t req_id;
  int64_t user_id;
  std::map<std::string, std::string>  carrier;

  _SocialGraphService_InsertUser_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const SocialGraphService_InsertUser_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_InsertUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_InsertUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SocialGraphService_InsertUser_pargs {
 public:


  virtual ~SocialGraphService_InsertUser_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_InsertUser_result__isset {
  _SocialGraphService_InsertUser_result__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_InsertUser_result__isset;

class SocialGraphService_InsertUser_result {
 public:

  SocialGraphService_InsertUser_result(const SocialGraphService_InsertUser_result&);
  SocialGraphService_InsertUser_result& operator=(const SocialGraphService_InsertUser_result&);
  SocialGraphService_InsertUser_result() {
  }

  virtual ~SocialGraphService_InsertUser_result() throw();
  ServiceException se;

  _SocialGraphService_InsertUser_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const SocialGraphService_InsertUser_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const SocialGraphService_InsertUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialGraphService_InsertUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SocialGraphService_InsertUser_presult__isset {
  _SocialGraphService_InsertUser_presult__isset() : se(false) {}
  bool se :1;
} _SocialGraphService_InsertUser_presult__isset;

class SocialGraphService_InsertUser_presult {
 public:


  virtual ~SocialGraphService_InsertUser_presult() throw();
  ServiceException se;

  _SocialGraphService_InsertUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SocialGraphServiceClient : virtual public SocialGraphServiceIf {
 public:
  SocialGraphServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SocialGraphServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetFollowers(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void send_GetFollowers(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_GetFollowers(std::vector<int64_t> & _return);
  void GetFollowees(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void send_GetFollowees(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_GetFollowees(std::vector<int64_t> & _return);
  void Follow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  void send_Follow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  void recv_Follow();
  void Unfollow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  void send_Unfollow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  void recv_Unfollow();
  void FollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  void send_FollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  void recv_FollowWithUsername();
  void UnfollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  void send_UnfollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  void recv_UnfollowWithUsername();
  void InsertUser(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void send_InsertUser(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_InsertUser();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SocialGraphServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SocialGraphServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SocialGraphServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetFollowers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFollowees(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Follow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Unfollow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FollowWithUsername(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnfollowWithUsername(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InsertUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SocialGraphServiceProcessor(::apache::thrift::stdcxx::shared_ptr<SocialGraphServiceIf> iface) :
    iface_(iface) {
    processMap_["GetFollowers"] = &SocialGraphServiceProcessor::process_GetFollowers;
    processMap_["GetFollowees"] = &SocialGraphServiceProcessor::process_GetFollowees;
    processMap_["Follow"] = &SocialGraphServiceProcessor::process_Follow;
    processMap_["Unfollow"] = &SocialGraphServiceProcessor::process_Unfollow;
    processMap_["FollowWithUsername"] = &SocialGraphServiceProcessor::process_FollowWithUsername;
    processMap_["UnfollowWithUsername"] = &SocialGraphServiceProcessor::process_UnfollowWithUsername;
    processMap_["InsertUser"] = &SocialGraphServiceProcessor::process_InsertUser;
  }

  virtual ~SocialGraphServiceProcessor() {}
};

class SocialGraphServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SocialGraphServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SocialGraphServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SocialGraphServiceIfFactory > handlerFactory_;
};

class SocialGraphServiceMultiface : virtual public SocialGraphServiceIf {
 public:
  SocialGraphServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SocialGraphServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SocialGraphServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SocialGraphServiceIf> > ifaces_;
  SocialGraphServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SocialGraphServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetFollowers(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFollowers(_return, req_id, user_id, carrier);
    }
    ifaces_[i]->GetFollowers(_return, req_id, user_id, carrier);
    return;
  }

  void GetFollowees(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFollowees(_return, req_id, user_id, carrier);
    }
    ifaces_[i]->GetFollowees(_return, req_id, user_id, carrier);
    return;
  }

  void Follow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Follow(req_id, user_id, followee_id, carrier);
    }
    ifaces_[i]->Follow(req_id, user_id, followee_id, carrier);
  }

  void Unfollow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Unfollow(req_id, user_id, followee_id, carrier);
    }
    ifaces_[i]->Unfollow(req_id, user_id, followee_id, carrier);
  }

  void FollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FollowWithUsername(req_id, user_usernmae, followee_username, carrier);
    }
    ifaces_[i]->FollowWithUsername(req_id, user_usernmae, followee_username, carrier);
  }

  void UnfollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnfollowWithUsername(req_id, user_usernmae, followee_username, carrier);
    }
    ifaces_[i]->UnfollowWithUsername(req_id, user_usernmae, followee_username, carrier);
  }

  void InsertUser(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InsertUser(req_id, user_id, carrier);
    }
    ifaces_[i]->InsertUser(req_id, user_id, carrier);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SocialGraphServiceConcurrentClient : virtual public SocialGraphServiceIf {
 public:
  SocialGraphServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SocialGraphServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetFollowers(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  int32_t send_GetFollowers(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_GetFollowers(std::vector<int64_t> & _return, const int32_t seqid);
  void GetFollowees(std::vector<int64_t> & _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  int32_t send_GetFollowees(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_GetFollowees(std::vector<int64_t> & _return, const int32_t seqid);
  void Follow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  int32_t send_Follow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  void recv_Follow(const int32_t seqid);
  void Unfollow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  int32_t send_Unfollow(const int64_t req_id, const int64_t user_id, const int64_t followee_id, const std::map<std::string, std::string> & carrier);
  void recv_Unfollow(const int32_t seqid);
  void FollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  int32_t send_FollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  void recv_FollowWithUsername(const int32_t seqid);
  void UnfollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  int32_t send_UnfollowWithUsername(const int64_t req_id, const std::string& user_usernmae, const std::string& followee_username, const std::map<std::string, std::string> & carrier);
  void recv_UnfollowWithUsername(const int32_t seqid);
  void InsertUser(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  int32_t send_InsertUser(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_InsertUser(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
