--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


local Thrift = require 'Thrift'
local TType = Thrift.TType
local TMessageType = Thrift.TMessageType
local __TObject = Thrift.__TObject
local TApplicationException = Thrift.TApplicationException
local __TClient = Thrift.__TClient
local __TProcessor = Thrift.__TProcessor
local ttype = Thrift.ttype
local ttable_size = Thrift.ttable_size
local social_network_ttypes = require 'social_network_ttypes'
local ServiceException = social_network_ttypes.ServiceException
local Post = social_network_ttypes.Post

local ComposePostServiceClient = __TObject.new(__TClient, {
  __type = 'ComposePostServiceClient'
})

function ComposePostServiceClient:UploadText(req_id, text, carrier)
  self:send_UploadText(req_id, text, carrier)
  self:recv_UploadText(req_id, text, carrier)
end

function ComposePostServiceClient:send_UploadText(req_id, text, carrier)
  self.oprot:writeMessageBegin('UploadText', TMessageType.CALL, self._seqid)
  local args = UploadText_args:new{}
  args.req_id = req_id
  args.text = text
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_UploadText(req_id, text, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadText_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:UploadMedia(req_id, media, carrier)
  self:send_UploadMedia(req_id, media, carrier)
  self:recv_UploadMedia(req_id, media, carrier)
end

function ComposePostServiceClient:send_UploadMedia(req_id, media, carrier)
  self.oprot:writeMessageBegin('UploadMedia', TMessageType.CALL, self._seqid)
  local args = UploadMedia_args:new{}
  args.req_id = req_id
  args.media = media
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_UploadMedia(req_id, media, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadMedia_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:UploadUniqueId(req_id, post_id, post_type, carrier)
  self:send_UploadUniqueId(req_id, post_id, post_type, carrier)
  self:recv_UploadUniqueId(req_id, post_id, post_type, carrier)
end

function ComposePostServiceClient:send_UploadUniqueId(req_id, post_id, post_type, carrier)
  self.oprot:writeMessageBegin('UploadUniqueId', TMessageType.CALL, self._seqid)
  local args = UploadUniqueId_args:new{}
  args.req_id = req_id
  args.post_id = post_id
  args.post_type = post_type
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_UploadUniqueId(req_id, post_id, post_type, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadUniqueId_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:UploadCreator(req_id, creator, carrier)
  self:send_UploadCreator(req_id, creator, carrier)
  self:recv_UploadCreator(req_id, creator, carrier)
end

function ComposePostServiceClient:send_UploadCreator(req_id, creator, carrier)
  self.oprot:writeMessageBegin('UploadCreator', TMessageType.CALL, self._seqid)
  local args = UploadCreator_args:new{}
  args.req_id = req_id
  args.creator = creator
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_UploadCreator(req_id, creator, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadCreator_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:UploadUrls(req_id, urls, carrier)
  self:send_UploadUrls(req_id, urls, carrier)
  self:recv_UploadUrls(req_id, urls, carrier)
end

function ComposePostServiceClient:send_UploadUrls(req_id, urls, carrier)
  self.oprot:writeMessageBegin('UploadUrls', TMessageType.CALL, self._seqid)
  local args = UploadUrls_args:new{}
  args.req_id = req_id
  args.urls = urls
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_UploadUrls(req_id, urls, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadUrls_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:UploadUserMentions(req_id, user_mentions, carrier)
  self:send_UploadUserMentions(req_id, user_mentions, carrier)
  self:recv_UploadUserMentions(req_id, user_mentions, carrier)
end

function ComposePostServiceClient:send_UploadUserMentions(req_id, user_mentions, carrier)
  self.oprot:writeMessageBegin('UploadUserMentions', TMessageType.CALL, self._seqid)
  local args = UploadUserMentions_args:new{}
  args.req_id = req_id
  args.user_mentions = user_mentions
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_UploadUserMentions(req_id, user_mentions, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadUserMentions_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
local ComposePostServiceIface = __TObject:new{
  __type = 'ComposePostServiceIface'
}


local ComposePostServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'ComposePostServiceProcessor'
})

function ComposePostServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ComposePostServiceProcessor:process_UploadText(seqid, iprot, oprot, server_ctx)
  local args = UploadText_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadText_result:new{}
  local status, res = pcall(self.handler.UploadText, self.handler, args.req_id, args.text, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadText', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_UploadMedia(seqid, iprot, oprot, server_ctx)
  local args = UploadMedia_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadMedia_result:new{}
  local status, res = pcall(self.handler.UploadMedia, self.handler, args.req_id, args.media, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadMedia', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_UploadUniqueId(seqid, iprot, oprot, server_ctx)
  local args = UploadUniqueId_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadUniqueId_result:new{}
  local status, res = pcall(self.handler.UploadUniqueId, self.handler, args.req_id, args.post_id, args.post_type, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadUniqueId', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_UploadCreator(seqid, iprot, oprot, server_ctx)
  local args = UploadCreator_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadCreator_result:new{}
  local status, res = pcall(self.handler.UploadCreator, self.handler, args.req_id, args.creator, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadCreator', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_UploadUrls(seqid, iprot, oprot, server_ctx)
  local args = UploadUrls_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadUrls_result:new{}
  local status, res = pcall(self.handler.UploadUrls, self.handler, args.req_id, args.urls, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadUrls', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_UploadUserMentions(seqid, iprot, oprot, server_ctx)
  local args = UploadUserMentions_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadUserMentions_result:new{}
  local status, res = pcall(self.handler.UploadUserMentions, self.handler, args.req_id, args.user_mentions, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadUserMentions', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

local UploadText_args = __TObject:new{
  req_id,
  text,
  carrier
}

function UploadText_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype91, _vtype92, _size90 = iprot:readMapBegin() 
        for _i=1,_size90 do
          local _key94 = iprot:readString()
          local _val95 = iprot:readString()
          self.carrier[_key94] = _val95
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadText_args:write(oprot)
  oprot:writeStructBegin('UploadText_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 2)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter96,viter97 in pairs(self.carrier) do
      oprot:writeString(kiter96)
      oprot:writeString(viter97)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadText_result = __TObject:new{
  se
}

function UploadText_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadText_result:write(oprot)
  oprot:writeStructBegin('UploadText_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadMedia_args = __TObject:new{
  req_id,
  media,
  carrier
}

function UploadMedia_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.media = {}
        local _etype101, _size98 = iprot:readListBegin()
        for _i=1,_size98 do
          local _elem102 = Media:new{}
          _elem102:read(iprot)
          table.insert(self.media, _elem102)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype104, _vtype105, _size103 = iprot:readMapBegin() 
        for _i=1,_size103 do
          local _key107 = iprot:readString()
          local _val108 = iprot:readString()
          self.carrier[_key107] = _val108
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadMedia_args:write(oprot)
  oprot:writeStructBegin('UploadMedia_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.media ~= nil then
    oprot:writeFieldBegin('media', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.media)
    for _,iter109 in ipairs(self.media) do
      iter109:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter110,viter111 in pairs(self.carrier) do
      oprot:writeString(kiter110)
      oprot:writeString(viter111)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadMedia_result = __TObject:new{
  se
}

function UploadMedia_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadMedia_result:write(oprot)
  oprot:writeStructBegin('UploadMedia_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUniqueId_args = __TObject:new{
  req_id,
  post_id,
  post_type,
  carrier
}

function UploadUniqueId_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.post_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.post_type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype113, _vtype114, _size112 = iprot:readMapBegin() 
        for _i=1,_size112 do
          local _key116 = iprot:readString()
          local _val117 = iprot:readString()
          self.carrier[_key116] = _val117
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUniqueId_args:write(oprot)
  oprot:writeStructBegin('UploadUniqueId_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.post_id ~= nil then
    oprot:writeFieldBegin('post_id', TType.I64, 2)
    oprot:writeI64(self.post_id)
    oprot:writeFieldEnd()
  end
  if self.post_type ~= nil then
    oprot:writeFieldBegin('post_type', TType.I32, 3)
    oprot:writeI32(self.post_type)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter118,viter119 in pairs(self.carrier) do
      oprot:writeString(kiter118)
      oprot:writeString(viter119)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUniqueId_result = __TObject:new{
  se
}

function UploadUniqueId_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUniqueId_result:write(oprot)
  oprot:writeStructBegin('UploadUniqueId_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadCreator_args = __TObject:new{
  req_id,
  creator,
  carrier
}

function UploadCreator_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.creator = Creator:new{}
        self.creator:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype121, _vtype122, _size120 = iprot:readMapBegin() 
        for _i=1,_size120 do
          local _key124 = iprot:readString()
          local _val125 = iprot:readString()
          self.carrier[_key124] = _val125
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadCreator_args:write(oprot)
  oprot:writeStructBegin('UploadCreator_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.creator ~= nil then
    oprot:writeFieldBegin('creator', TType.STRUCT, 2)
    self.creator:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter126,viter127 in pairs(self.carrier) do
      oprot:writeString(kiter126)
      oprot:writeString(viter127)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadCreator_result = __TObject:new{
  se
}

function UploadCreator_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadCreator_result:write(oprot)
  oprot:writeStructBegin('UploadCreator_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUrls_args = __TObject:new{
  req_id,
  urls,
  carrier
}

function UploadUrls_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.urls = {}
        local _etype131, _size128 = iprot:readListBegin()
        for _i=1,_size128 do
          local _elem132 = Url:new{}
          _elem132:read(iprot)
          table.insert(self.urls, _elem132)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype134, _vtype135, _size133 = iprot:readMapBegin() 
        for _i=1,_size133 do
          local _key137 = iprot:readString()
          local _val138 = iprot:readString()
          self.carrier[_key137] = _val138
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUrls_args:write(oprot)
  oprot:writeStructBegin('UploadUrls_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.urls ~= nil then
    oprot:writeFieldBegin('urls', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.urls)
    for _,iter139 in ipairs(self.urls) do
      iter139:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter140,viter141 in pairs(self.carrier) do
      oprot:writeString(kiter140)
      oprot:writeString(viter141)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUrls_result = __TObject:new{
  se
}

function UploadUrls_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUrls_result:write(oprot)
  oprot:writeStructBegin('UploadUrls_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUserMentions_args = __TObject:new{
  req_id,
  user_mentions,
  carrier
}

function UploadUserMentions_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.user_mentions = {}
        local _etype145, _size142 = iprot:readListBegin()
        for _i=1,_size142 do
          local _elem146 = UserMention:new{}
          _elem146:read(iprot)
          table.insert(self.user_mentions, _elem146)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype148, _vtype149, _size147 = iprot:readMapBegin() 
        for _i=1,_size147 do
          local _key151 = iprot:readString()
          local _val152 = iprot:readString()
          self.carrier[_key151] = _val152
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUserMentions_args:write(oprot)
  oprot:writeStructBegin('UploadUserMentions_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_mentions ~= nil then
    oprot:writeFieldBegin('user_mentions', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.user_mentions)
    for _,iter153 in ipairs(self.user_mentions) do
      iter153:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter154,viter155 in pairs(self.carrier) do
      oprot:writeString(kiter154)
      oprot:writeString(viter155)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local UploadUserMentions_result = __TObject:new{
  se
}

function UploadUserMentions_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUserMentions_result:write(oprot)
  oprot:writeStructBegin('UploadUserMentions_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end